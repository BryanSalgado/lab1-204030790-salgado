#lang racket
#|TDA Zonas|#
;El TDA de zonas estará dado por una lista de cuatro elementos, que representarán una de las zonas básicas de Git, y el historial de modificaciones.
;=> '(Workspace Index Local Repository Remote Repository Historial)
;Cada uno de los elementos de "zonas" consistirá en  lista que albergará las distintas versiones del código, que para efectos de este laboratorio son strings,
;y un útima el historial.
;Las zonas Workspace e Index tienen el siguiente formato:
;=> '(("NombreArchivo1" . "Archivo1") ("NombreArchivo2" . "Archivo2") ...)
;Las zonas Local Repository y Remote Repository tienen el siguiente formato:
;=> '(("Commit1" ("NombreArchivo1" . "Archivo1") ("NombreArchivo2" . "Archivo2") ...) ("Commit2" ("NombreArchivo1" . "Archivo1") ...) ...)
;Por último el Historial:
;=> '("add" "push" "pull" ...)


;CONSTRUCTOR

;Dom: Las cinco zonas básicas de Git(listas de Strings)
;Rec: El TDA zonas (listas de listas de Strings)
;Esta función crea una lista con las cuatro entradas que representan las zonas básicas y genera un historial vacío

(define (TDAzonas Workspace Index LocalRepository RemoteRepository)
  (list Workspace Index LocalRepository RemoteRepository '())
  )

;PERTENENCIA
;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Booleano
;Esta función verifica que la entrada sea un TDA de zonas, retornado #t de ser así, si no, #f.
(define (zonas? zonas)
  (if (and (list? zonas) (= (length zonas) 5)
           (list? (car zonas)) (list? (cadr zonas)) (list? (caddr zonas)) (list? (cadddr zonas)) (list? (cadddr (cdr zonas)))
         )
      #t
      #f
    )
  )

;SELECTORES

;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Zona (lista de Strings)
;Esta función obtiene la zona Workspace de un TDA zonas

(define (getWorkspace zonas)
  (if (zonas? zonas)
      (car zonas)
      null
  )
 )

;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Zona (lista de Strings)
;Esta función obtiene la zona Workspace de un TDA zonas

(define (getIndex zonas)
  (if (zonas? zonas)
      (cadr zonas)
      null
  )
 )

;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Zona (lista de Strings)
;Esta función obtiene la zona Workspace de un TDA zonas

(define (getLocalR zonas)
  (if (zonas? zonas)
      (caddr zonas)
      null
  )
 )

;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Zona (lista de Strings)
;Esta función obtiene la zona Workspace de un TDA zonas

(define (getRemoteR zonas)
  (if (zonas? zonas)
      (cadddr zonas)
      null
  )
 )


;Dom: El TDA zonas (lista de cuatro listas)
;Rec: Historial (lista de Strings)
;Esta función obtiene el historial de un TDA zonas

(define (getHistorial zonas)
  (if (zonas? zonas)
      (cadddr (cdr zonas))
      null
  )
 )

;Dom: Una nueva zona (lista de strings) y un TDA zonas (lista de cuatro listas)
;Rec: El TDA zonas (lista de cuatro listas)
;Esta función retorna un TDA zonas con el Workspace modificado

(define (setWorkspace newWorkspace zonas)
  (if (zonas? zonas)
      (list newWorkspace
            (getIndex zonas)
            (getLocalR zonas)
            (getRemoteR zonas)
            (getHistorial zonas)
         )
      null
     )
 )

;Dom: Una nueva zona (lista de strings) y un TDA zonas (lista de cuatro listas)
;Rec: El TDA zonas (lista de cuatro listas)
;Esta función retorna un TDA zonas con el Index modificado
(define (setIndex newIndex zonas)
  (if (zonas? zonas)
      (list (getWorkspace zonas)
            newIndex
            (getLocalR zonas)
            (getRemoteR zonas)
            (getHistorial zonas)
         )
      null
     )
 )

;Dom: Una nueva zona (lista de strings) y un TDA zonas (lista de cuatro listas)
;Rec: El TDA zonas (lista de cuatro listas)
;Esta función retorna un TDA zonas con el Local Repository modificado
(define (setLocalR newLocalR zonas)
  (if (zonas? zonas)
      (list (getWorkspace zonas)
            (getIndex zonas)
            newLocalR
            (getRemoteR zonas)
            (getHistorial zonas)
         )
      null
     )
 )

;Dom: Una nueva zona (lista de strings) y un TDA zonas (lista de cuatro listas)
;Rec: El TDA zonas (lista de cuatro listas)
;Esta función retorna un TDA zonas con el Remote Repository modificado
(define (setRemoteR newRemoteR zonas)
  (if (zonas? zonas)
      (list (getWorkspace zonas)
            (getIndex zonas)
            (getLocalR zonas)
            newRemoteR
            (getHistorial zonas)
         )
      null
     )
 )

;Dom: Una nueva zona (lista de strings) y un TDA zonas (lista de cuatro listas)
;Rec: El TDA zonas (lista de cuatro listas)
;Esta función retorna un TDA zonas con el Historial modificado
(define (setHistorial newHistorial zonas)
  (if (zonas? zonas)
      (list (getWorkspace zonas)
            (getIndex zonas)
            (getLocalR zonas)
            (getRemoteR zonas)
            newHistorial
         )
      null
     )
 )





;'((("lab" . "T I C")) (("lab" . "T I C")) (("commit1" ("lab" . "T")) ("commit2" ("lab" . "T I C"))) (("commit1" ("lab" . "T"))) ("add"))
;'((("lab" . "T I C")) () (("commit1" ("lab" . "T")) ("commit2" ("lab" . "T I C"))) (("commit1" ("lab" . "T"))) ())
;'((("lab" . "T I C")) (("lab" . "T I C")) () (("commit1" ("lab" . "T"))) ("add"))

#|

((("lab" . "T I C"))
 (("lab" . "T I C"))
 (("commit1" ("lab" . "T")) ("commit2" ("lab" . "T I C")))
 (("commit1" ("lab" . "T")))
 ("add" "commit")
)
|#
;Ejemplos
;(TDAzonas '(("NombreArchivo1" . "Archivo1")) '() '(("Commit1" ("NombreArchivo1" . "Archivo1"))) '(("Commit2" ("NombreArchivo1" . "Archivo1"))))
;(((git add) '("lab")) '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) () () () ()))
;(((git commit) "commit10") '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) (("lab" . "T I C")) () () ("add")))
;((git push) '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) (("lab" . "T I C")) (("commit10" ("lab" . "T I C"))) () ("add" "commit")))
;((git zonas->string) '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) (("lab" . "T I C")) (("commit10" ("lab" . "T I C"))) (("commit10" ("lab" . "T I C"))) ("add" "commit" "push")))
;((git status) '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) (("lab" . "T I C")) (("commit10" ("lab" . "T I C"))) (("commit10" ("lab" . "T I C"))) ("add" "commit" "push")))
;((git log) '((("NombreArchivo1" . "Archivo1") ("lab" . "T I C")) (("lab" . "T I C")) (("commit10" ("lab" . "T I C"))) (("commit10" ("lab" . "T I C"))) ("add" "commit" "push")))

(provide (all-defined-out))
